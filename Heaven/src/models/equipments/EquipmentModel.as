package models.equipments {
	import models.stats.Stats;
	import models.stats.ImmutableStats;
	import models.characters.CharacterModel;
	import data.GameObjectModel;
	import errors.IllegalArgumentException;
	import enums.EquipmentType;

	/**
	 * WeaponModel
	 * 
	 * Model of the weapon
	 * Contains stats and special effects if any
	 * 
	 * @author Ken
	 */
	public class EquipmentModel implements GameObjectModel {
		
		/**
		 * Type of this equipment
		 */
		protected var _equipmentType:EquipmentType;
		/**
		 * Type of this equipment
		 */
		public function get equipmentType():EquipmentType { return _equipmentType; }
		/**
		 * Code of this equipment
		 */
		protected var _equipmentCode:int;
		/**
		 * Code of this equipment
		 */
//		public function get equipmentCode():int { return _equipmentCode; }
		public function get code():int { return _equipmentCode; }
		/**
		 * Name of this equipment
		 */
		protected var _equipmentName:String;
		/**
		 * Name of this equipment
		 */
//		public function get equipmentName():String { return _equipmentName; }
		public function get name():String { return _equipmentName; }
		/**
		 * Base stats of this equipments
		 */
		protected var _baseStats:ImmutableStats;
		/**
		 * Base stats of this equipments
		 */
//		public function get baseStats():ImmutableStats { return _baseStats; }
		public function get baseStats():Stats {
			return Stats.getStatsFromImmutableStats(_baseStats);
		}
		/**
		 * Stats of this equipment. This is the stats which will take
		 * effects on the characters
		 */
		protected var _stats:Stats;
		/**
		 * Stats of this equipment. This is the stats which will take
		 * effects on the characters
		 */
		public function get stats():Stats { return _stats; }
		/**
		 * Description of this equipment
		 */
		protected var _description:String;
		/**
		 * Description of this equipment
		 */
		public function get description():String { return _description; }
		/**
		 * Skills contained in this equipment
		 */
		protected var _skills:Vector.<int>;
		/**
		 * Skills contained in this equipment
		 */
		public function get skills():Vector.<int> { return _skills.slice(); }
		/**
		 * Character who wears this weapon
		 */
		protected var _character:CharacterModel;
		/**
		 * Character who wears this weapon
		 */
		public function get character():CharacterModel { return _character; }
		/**
		 * Flag to indicate whether this equipment is available to equip
		 */
		public function get isAvailable():Boolean { return _character == null; }
		
		/**
		 * Convenient constructor
		 * 
		 * @param	equipmentType
		 * 			is the type of this equipment
		 * @param	equipmentCode
		 * 			is the code of this equipment
		 * @param	equipmentName
		 * 			is the name of this equipment
		 * @param	baseStats
		 * 			is the base stats of this equipment
		 * @param	description
		 * 			is the description of this equipment
		 * @param	skills
		 * 			is the skills of this equipment
		 */
		public function EquipmentModel(equipmentType:EquipmentType, equipmentCode:int,
										equipmentName:String, baseStats:ImmutableStats,
										description:String = "", skills:Vector.<int> = null) {
			_equipmentType = equipmentType;
			_equipmentCode = equipmentCode;
			_equipmentName = equipmentName;
			_baseStats = baseStats;
			_stats = Stats.getStatsFromImmutableStats(baseStats);
			_description = description;
			if (skills == null) _skills = new Vector.<int>();
			else _skills = skills;
			if (_description == "")	autoGenerateDescription();						
		}
		
		/**
		 * Autogenerate the description for this equipment
		 */
		private function autoGenerateDescription():void {
			
		}
		
		/**
		 * Equip this weapon by a character
		 * 
		 * @param	character
		 * 			is the model of the character who wears this weapon
		 * 			
		 * @throws	IllegalArgumentException
		 * 			if the weapon is currently in used (not available)
		 */
		public function equipBy(character:CharacterModel):void {
			if (! this.isAvailable)
				throw new IllegalArgumentException("Equipment in used.");
				
			_character = character;
			_character.stats.combineStats(stats);
			_character.stats.adjustHpMp();
		}
		
		/**
		 * Unequip this weapon
		 */
		public function unEquip():void {
			var character:CharacterModel = _character;
			_character = null;
			character.reCalculateStats();
			if (_skills.length > 0)
				character.reLearnSkills();
		}
		
		public function clone():GameObjectModel {
			return new EquipmentModel(_equipmentType, _equipmentCode, _equipmentName,
										_baseStats, _description, _skills);
		}
		
	}
}
